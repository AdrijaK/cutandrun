/*
 * --------------------------------------------------
 *  Config file for defining DSL2 per module options
 * --------------------------------------------------
 *
 *   Available keys to override module options:
 *       args           = Additional arguments appended to command in module.
 *       args2          = Second set of arguments appended to command in module (multi-tool modules).
 *       publish_dir    = Directory to publish results.
 *       publish_by_id  = Publish results in separate folders by meta.id value.
 *       publish_files  = Groovy map where key = "file_ext" and value = "directory" to publish results for that file extension
 *                        The value of "directory" is appended to the standard "publish_dir" path as defined above.
 *                        If publish_files == null (unspecified)  - All files are published.
 *                        If publish_files == false               - No files are published.
 *       suffix         = File name suffix for output files.
 *
 */

params {
    modules {
        'sra_ids_to_runinfo' {
            publish_dir     = 'public_data'
            publish_files   = ['tsv':'runinfo']
        }
        'sra_runinfo_to_ftp' {
            publish_dir     = 'public_data'
            publish_files   = ['tsv':'runinfo']
        }
        'sra_fastq_ftp' {
            publish_dir     = 'public_data'
            publish_files   = ['fastq.gz':'', 'md5':'md5']
            args            = '-C - --max-time 1200'
        }
        'sra_to_samplesheet' {
            publish_dir     = 'public_data'
            publish_files   = false
        }
        'sra_merge_samplesheet' {
            publish_dir     = 'public_data'
        }
        'bowtie2_index' {
            publish_dir   = "genome/index"
        }
        'bowtie2_spikein_index' {
            publish_dir   = "genome/spikein_index"
        }

        'cat_fastq' {
            publish_dir   = 'fastq'
        }
        'fastqc' {
            args          = "--quiet"
        }
        'trimgalore' {
            args          = "--fastqc"
            publish_files = ['txt':'', 'html':'fastqc', 'zip':'fastqc']
        }

        'bowtie2_align' {
            args          = "--end-to-end --very-sensitive --no-mixed --no-discordant --phred33 -I 10 -X 700"
            suffix        = ".target"
            publish_dir   = "${params.aligner}/target"
            publish_files = ['txt':'']
        }
        'bowtie2_spikein_align' {
            args          = "--end-to-end --very-sensitive --no-overlap --no-dovetail --no-mixed --no-discordant --phred33 -I 10 -X 700"
            suffix        = ".spikein"
            publish_dir   = "${params.aligner}/spikein"
            publish_files = ['txt':'']
        }
        'samtools_sort' {
            suffix        = ".target.sorted"
            publish_files = ['stats':'samtools_stats', 'flagstat':'samtools_stats', 'idxstats':'samtools_stats']
            publish_dir   = "${params.aligner}/target"
        }
        'samtools_spikein_sort' {
            suffix        = ".spikein.sorted"
            publish_files = ['stats':'samtools_stats', 'flagstat':'samtools_stats', 'idxstats':'samtools_stats']
            publish_dir   = "${params.aligner}/spikein"
        }

        'samtools_view' {
            args          = '-q 0'
            suffix        = ".filtered"
            publish_files = false
            publish_dir   = "${params.aligner}/target"
        }
        'samtools_qfilter' {
            suffix        = ".filtered"
            publish_files = ['stats':'samtools_stats', 'flagstat':'samtools_stats', 'idxstats':'samtools_stats']
            publish_dir   = "${params.aligner}/target"
        }

        'picard_markduplicates' {
            args          = "ASSUME_SORTED=true REMOVE_DUPLICATES=false VALIDATION_STRINGENCY=LENIENT TMP_DIR=tmp"
            suffix        = ".markdup"
            publish_files = ['bam': 'picard_markdup', 'metrics.txt':'picard_metrics']
            publish_dir   = "${params.aligner}/target"
        }
        'picard_markduplicates_samtools' {
            suffix        = ".markdup.sorted"
            publish_files = ['stats':'samtools_stats', 'flagstat':'samtools_stats', 'idxstats':'samtools_stats']
            publish_dir   = "${params.aligner}/target"
        }

        'picard_dedup' {
            args          = "ASSUME_SORTED=true REMOVE_DUPLICATES=true VALIDATION_STRINGENCY=LENIENT TMP_DIR=tmp"
            suffix        = ".dedup"
            publish_files = ['bam': '', 'metrics.txt':'picard_metrics']
            publish_dir   = "${params.aligner}/target"
        }
        'picard_dedup_samtools' {
            suffix        = ".dedup.sorted"
            publish_files = ['bai':'', 'stats':'samtools_stats', 'flagstat':'samtools_stats', 'idxstats':'samtools_stats']
            publish_dir   = "${params.aligner}/target"
        }

        'awk_bt2' {
            args          = ""
            suffix        = ".target"
            publish_dir   = "awk/bt2" 
        }
        'awk_bt2_spikein' {
            args          = ""
            suffix        = ".spikein"
            publish_dir   = "awk/bt2"
        }

        'bedtools_genomecov_bedgraph' {
            args          = ""
            suffix        = ""
            publish_dir   = "genomecov"
        }
        'seacr' {
            args            = "non stringent"
            suffix          = ".bed"
            publish_dir     = "seacr"
        }
        'ucsc_bedclip' {
            suffix        = ".clip"
            publish_files = false
        }
        'ucsc_bedgraphtobigwig' {
            publish_dir   = "${params.aligner}/bigwig"
        }
        'deeptools_fragmentsize' {
            publish_dir   = "deeptools"
        }

        'igv' {
            publish_dir   = "igv"
        }
        'multiqc' {
            args          = ""
            publish_dir   = "multiqc"
        }
        'awk_dedup' {
            args          = ""
            suffix        = ".dedup"
            publish_dir   = "awk/picard"
            command       = "'/^[^#]/{print}'"
            command2      = "| head -2 | sed 's/\\t/,/g' - | sed 's/.*/\\L&/g' -"
        }
        'awk_dt_frag' {
            args          = ""
            suffix        = ".dt.frag"
            publish_dir   = "awk/dt"
        }
        'export_meta' {
            publish_dir   = "meta"
        }
        'generate_reports' {
            publish_dir   = "reports"
        }

        'calc_frag_samtools_view' {
            args          = '-F 0x04 -b'
            suffix        = ".mapped"
            publish_dir   = "calc_frag"
        }
        'calc_frag_samtools' {
            args          = ''
            suffix        = ".mapped"
            publish_dir   = "calc_frag"
        }
        'calc_frag_bamtobed' {
            args          = '-bedpe'
            suffix        = ''
            publish_dir   = 'calc_frag'
        }
        'calc_frag_awk' {
            args         = ""
            suffix        = ".clean"
            ext           = "bed"
            publish_dir   = "calc_frag"
            command       = "'\$1==\$4 && \$6-\$2 < 1000 {print \$0}'"
            command2      = ""
        }
        'calc_frag_cut' {
            args          = "-f 1,2,6"
            suffix        = ".frags"
            ext           = "bed"
            publish_dir   = "calc_frag"
            command       = "| sort -k1,1 -k2,2n -k3,3n"
        }

        'awk_frag_bin' {
            args         = "-v w=500"
            suffix        = ".frags.bin500"
            ext           = "bed"
            publish_dir   = "awk/bin500"
            command       = "'{print \$1, int((\$2 + \$3)/(2*w))*w + w/2, FILENAME}'"
            command2      = "| sort -k1,1V -k2,2n | uniq -c | awk -v OFS=\"\\t\" '{print \$2, \$3, \$1, \$4}' | sort -k1,1V -k2,2n"
        }

        'awk_edit_peak_bed' {
            command     = "'{split(\$6, summit, \":\"); split(summit[2], region, \"-\"); print summit[1]\"\\t\"region[1]\"\\t\"region[2]}'"
            suffix      = ".max_signal"
        }

        'dt_compute_mat_gene' {
            args        = "scale-regions --beforeRegionStartLength 3000 --regionBodyLength 5000 --afterRegionStartLength 3000 --skipZeros"
            publish_dir = "deeptools/heatmaps/gene"
        }
        'dt_compute_mat_peaks' {
            args        = "reference-point -a 3000 -b 3000 --referencePoint center --skipZeros"
            publish_dir = "deeptools/heatmaps/peaks"
        }

        'dt_plotheatmap_gene' {
            args        = "--sortUsing sum"
            publish_dir = "deeptools/heatmaps/gene"
        }

        'dt_plotheatmap_peaks' {
            args        = "--sortUsing sum --startLabel \"Peak Start\" --endLabel \"Peak End\" --xAxisLabel \"\" --regionsLabel \"Peaks\""
            publish_dir = "deeptools/heatmaps/peaks"
        }

        'samtools_frag_len' {
            args          = '-F 0x04'
            args2         = "awk -F'\\t' 'function abs(x){return ((x < 0.0) ? -x : x)} {print abs(\$9)}' | sort | uniq -c | awk -v OFS=\"\\t\" '{print \$2, \$1/2}'"
            suffix        = '.frag_len'
            publish_dir   = 'frag_len'
        }

        'samtools_sort' {
            args          = "-n"
            publish_dir   = "bam_query_sorted"
            suffix        = ".sorted"
        } 
    }
}
