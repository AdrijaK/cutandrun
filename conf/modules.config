/*
========================================================================================
    Config file for defining DSL2 per module options and publishing paths
========================================================================================
    Available keys to override module options:
        ext.args            = Additional arguments appended to command in module.
        ext.args2           = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3           = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix          = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

/*
========================================================================================
    GENERAL
========================================================================================
*/

process {
    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: 'copy',
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/pipeline_info" },
            mode: 'copy',
            pattern: '*_versions.yml'
        ]
    }
}

/*
========================================================================================
    INPUT
========================================================================================
*/

if(params.run_input_check) {
    process {
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:INPUT_CHECK:SAMPLESHEET_CHECK' {
            publishDir = [
                path: { "${params.outdir}/pipeline_info" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}

/*
========================================================================================
    GENOME PREPARATION
========================================================================================
*/

if (params.run_genome_prep) {
    process {
        withName: '.*PREPARE_GENOME:GUNZIP_.*' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:PREPARE_GENOME:UNTAR_.*' {
            ext.args2 = '--no-same-owner'
        }

        withName: '.*CHROMSIZES' {
            publishDir = [
                path: { "${params.outdir}/00_genome" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'UNTAR_INDEX_.*|TARGET|SPIKEIN' {
            publishDir = [
                path: { "${params.outdir}/00_genome/index" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }

        withName: 'BOWTIE2_BUILD_.*|TARGET|SPIKEIN' {
            publishDir = [
                path: { "${params.outdir}/00_genome/index" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_reference
            ]
        }
    }
}

/*
========================================================================================
    PRE-ALIGNMENT
========================================================================================
*/

if(params.run_cat_fastq) {
    process {
        withName: 'CAT_FASTQ' {
            publishDir = [
                path: { "${params.outdir}/01_prealign/merged_fastq" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
                enabled: params.save_merged_fastq
            ]
        }
    }
}

if(params.run_trim_galore_fastqc) {
    process {
        withName: '.*:FASTQC_TRIMGALORE:FASTQC' {
            ext.args   = '--quiet'
            publishDir = [
                path: { "${params.outdir}/01_prealign/pretrim_fastqc" },
                mode: 'copy',
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename },
            ]
        }

        withName: '.*:FASTQC_TRIMGALORE:TRIMGALORE' {
            ext.args   = [
                '--fastqc',
                params.trim_nextseq > 0 ? "--nextseq ${params.trim_nextseq}" : ''
            ].join(' ').trim()
            publishDir = [
                [
                    path: { "${params.outdir}/01_prealign/trimgalore/fastqc" },
                    mode: 'copy',
                    pattern: "*.{html,zip}"
                ],
                [
                    path: { "${params.outdir}/01_prealign/trimgalore" },
                    mode: 'copy',
                    pattern: "*.fq.gz",
                    enabled: params.save_trimmed
                ],
                [
                    path: { "${params.outdir}/01_prealign/trimgalore" },
                    mode: 'copy',
                    pattern: "*.txt"
                ]
            ]
        }
    }
}

/*
========================================================================================
    ALIGNMENT
========================================================================================
*/

if(params.run_alignment) {
    process {
        withName: '.*:ALIGN_BOWTIE2:BOWTIE2_ALIGN' {
            ext.args   = '--end-to-end --very-sensitive --no-mixed --no-discordant --phred33 -I 10 -X 700'
            publishDir = [
                [
                    path: { "${params.outdir}/02_alignment/${params.aligner}/target/log" },
                    mode: 'copy',
                    pattern: '*.log'
                ],
                [
                    path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
                    mode: 'copy',
                    pattern: '*.bam',
                    enabled: ( params.save_align_intermed || (!params.run_q_filter && !params.run_mark_dups && !params.run_remove_dups) )
                ],
                [
                    path: { "${params.outdir}/02_alignment/${params.aligner}/target/unmapped" },
                    mode: 'copy',
                    pattern: '*.fastq.gz',
                    enabled: params.save_unaligned
                ]
            ]
        }

        withName: '.*:ALIGN_BOWTIE2:BOWTIE2_SPIKEIN_ALIGN' {
            ext.args   = '--end-to-end --very-sensitive --no-overlap --no-dovetail --no-mixed --no-discordant --phred33 -I 10 -X 700'
            publishDir = [
                [
                    path: { "${params.outdir}/02_alignment/${params.aligner}/spikein/log" },
                    mode: 'copy',
                    pattern: '*.log'
                ],
                [
                    path: { "${params.outdir}/02_alignment/${params.aligner}/spikein" },
                    mode: 'copy',
                    pattern: '*.bam',
                    enabled: ( params.save_spikein_aligned && ( params.save_align_intermed || (!params.run_q_filter && !params.run_mark_dups && !params.run_remove_dups) ) )
                ],
                [
                    path: { "${params.outdir}/02_alignment/${params.aligner}/spikein/unmapped" },
                    mode: 'copy',
                    pattern: '*.fastq.gz',
                    enabled: ( params.save_spikein_aligned && params.save_unaligned )
                ]
            ]
        }
        
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:.*:BAM_SORT_SAMTOOLS:BAM_STATS_SAMTOOLS:.*' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
                mode: 'copy',
                pattern: "*.{stats,flagstat,idxstats}",
                enabled: ( params.save_align_intermed || (!params.run_q_filter && !params.run_mark_dups && !params.run_remove_dups) )
            ]
        }

         withName: 'NFCORE_CUTANDRUN:CUTANDRUN:.*:BAM_SORT_SAMTOOLS_SPIKEIN:BAM_STATS_SAMTOOLS:.*' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/spikein" },
                mode: 'copy',
                pattern: "*.{stats,flagstat,idxstats}",
                enabled: ( params.save_spikein_aligned && ( params.save_align_intermed || (!params.run_q_filter && !params.run_mark_dups && !params.run_remove_dups) ) )
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:.*:BAM_SORT_SAMTOOLS:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.target.sorted" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
                mode: 'copy',
                pattern: "*.bam",
                enabled: ( params.save_align_intermed || (!params.run_q_filter && !params.run_mark_dups && !params.run_remove_dups) )
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:.*:BAM_SORT_SAMTOOLS_SPIKEIN:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.spikein.sorted" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/spikein" },
                mode: 'copy',
                pattern: "*.bam",
                enabled: ( params.save_spikein_aligned && ( params.save_align_intermed || (!params.run_q_filter && !params.run_mark_dups && !params.run_remove_dups) ) )
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:.*:BAM_SORT_SAMTOOLS:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
                mode: 'copy',
                pattern: "*.bai",
                enabled: ( params.save_align_intermed || (!params.run_q_filter && !params.run_mark_dups && !params.run_remove_dups) )
            ]
        }

         withName: 'NFCORE_CUTANDRUN:CUTANDRUN:.*:BAM_SORT_SAMTOOLS_SPIKEIN:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/spikein" },
                mode: 'copy',
                pattern: "*.bam",
                enabled: ( params.save_spikein_aligned && ( params.save_align_intermed || (!params.run_q_filter && !params.run_mark_dups && !params.run_remove_dups) ) )
            ]
        }
    }
}

/*
========================================================================================
    Q-FILTERING
========================================================================================
*/

if(params.run_q_filter) {
    process {
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:SAMTOOLS_VIEW_SORT_STATS:SAMTOOLS_VIEW' {
            ext.args = "-b -q ${params.minimum_alignment_q_score}"
            ext.prefix = { "${meta.id}.target.filtered" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
                mode: 'copy',
                pattern: "*.bam",
                enabled: ( params.save_align_intermed || (!params.run_mark_dups && !params.run_remove_dups) )
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:SAMTOOLS_VIEW_SORT_STATS:SAMTOOLS_SORT' {
            ext.prefix = { "${meta.id}.target.filtered.sorted" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
                mode: 'copy',
                pattern: "*.bam",
                enabled: ( params.save_align_intermed || (!params.run_mark_dups && !params.run_remove_dups) )
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:SAMTOOLS_VIEW_SORT_STATS:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
                mode: 'copy',
                pattern: "*.bai",
                enabled: ( params.save_align_intermed || (!params.run_mark_dups && !params.run_remove_dups) )
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:SAMTOOLS_VIEW_SORT_STATS:BAM_STATS_SAMTOOLS:.*' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
                mode: 'copy',
                pattern: "*.{stats,flagstat,idxstats}",
                enabled: ( params.save_align_intermed || (!params.run_mark_dups && !params.run_remove_dups) )
            ]
        }
    }
}

/*
========================================================================================
    DUPLICATES
========================================================================================
*/

if(params.run_mark_dups) {
    process {
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:MARK_DUPLICATES_PICARD:PICARD_MARKDUPLICATES' {
            ext.args = "--ASSUME_SORT_ORDER coordinate --REMOVE_DUPLICATES false --VALIDATION_STRINGENCY LENIENT --TMP_DIR tmp"
            ext.prefix = { "${meta.id}.target.markdup" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
                mode: 'copy',
                pattern: "*.bam",
                enabled: ( params.save_align_intermed || (!params.run_remove_dups) || (!params.dedup_target_reads) )
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:MARK_DUPLICATES_PICARD:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
                mode: 'copy',
                pattern: "*.bai",
                enabled: ( params.save_align_intermed || (!params.run_remove_dups) )
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:MARK_DUPLICATES_PICARD:BAM_STATS_SAMTOOLS:.*' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
                mode: 'copy',
                pattern: "*.{stats,flagstat,idxstats}",
                enabled: ( params.save_align_intermed || (!params.run_remove_dups) )
            ]
        }
    }
}

if(params.run_remove_dups) {
    process {
        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:DEDUPLICATE_PICARD:PICARD_MARKDUPLICATES' {
            ext.args = "--ASSUME_SORT_ORDER coordinate --REMOVE_DUPLICATES false --VALIDATION_STRINGENCY LENIENT --TMP_DIR tmp"
            ext.prefix = { "${meta.id}.target.dedup" }
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
                mode: 'copy',
                pattern: "*.bam",
                enabled: true
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:DEDUPLICATE_PICARD:SAMTOOLS_INDEX' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
                mode: 'copy',
                pattern: "*.bai",
                enabled: true
            ]
        }

        withName: 'NFCORE_CUTANDRUN:CUTANDRUN:DEDUPLICATE_PICARD:BAM_STATS_SAMTOOLS:.*' {
            publishDir = [
                path: { "${params.outdir}/02_alignment/${params.aligner}/target" },
                mode: 'copy',
                pattern: "*.{stats,flagstat,idxstats}",
                enabled: true
            ]
        }
    }
}

/*
========================================================================================
    ANNOTATE META WITH ALIGN AND DUP STATS
========================================================================================
*/

process {
    withName: 'NFCORE_CUTANDRUN:CUTANDRUN:ANNOTATE_BT2_META:AWK_SCRIPT' {
        ext.suffix = ".target" 
        publishDir = [
            enabled: false
        ]
    }

    withName: 'NFCORE_CUTANDRUN:CUTANDRUN:ANNOTATE_BT2_SPIKEIN_META:AWK_SCRIPT' {
        ext.suffix = ".dedup"
        publishDir = [
            enabled: false
        ]
    }

    withName: 'NFCORE_CUTANDRUN:CUTANDRUN:ANNOTATE_DEDUP_META:AWK' {
        ext.suffix = ".awk"
        ext.command = "'/^[^#]/{print}'"
        ext.command2 = " > int1.txt && head -2 int1.txt > int2.txt && sed 's/\\t/,/g' int2.txt > int3.txt && sed 's/.*/\\L&/g' int3.txt "
        publishDir = [
            enabled: false
        ]
    }
}











// //TODO: PEAK PLOTTING options - infact all reporting options - how t













//         /*
//         ========================================================================================
//             SCALING/CONVERSION AND PEAK CALLING
//         ========================================================================================
//         */

//         "bedtools_genomecov_bedgraph" {
//             //publish_dir   = "03_peak_calling/01_bam_to_bedgraph"
//             publish_files = false
//         }

//         "sort_bedgraph" {
//             publish_dir   = "03_peak_calling/01_bam_to_bedgraph"
//             suffix        = ".sorted"
//         }

//         "ucsc_bedclip" {
//             suffix        = ".clipped"
//             publish_dir   = "03_peak_calling/02_clip_bed"
//         }

//         "ucsc_bedgraphtobigwig" {
//             publish_dir   = "03_peak_calling/03_bed_to_bigwig"
//         }

//         "seacr" {
//             args          = "non stringent"
//             suffix        = ".seacr.peaks.bed"
//             publish_dir   = "03_peak_calling/04_called_peaks"
//         }

//         "macs2" {
//             args          = ""
//             suffix        = ".macs2.peaks.bed"
//             publish_dir   = "03_peak_calling/04_called_peaks"
//         }

//         /*
//         ========================================================================================
//             CONSENSUS PEAKS
//         ========================================================================================
//         */

//         "awk_name_peak_bed" {
//             command       = "'{OFS = \"\\t\"} {print \$0, FILENAME}'"
//             publish_files = false
//             ext           = "bed"
//         }

//         "sort_group_peaks" {
//             args          = "-k1,1 -k2,2n"
//             publish_files = false
//             ext           = "bed"
//         }

//         "bedtools_merge_groups" {
//             args          = " -c 2,3,4,5,6,7,7 -o collapse,collapse,collapse,collapse,collapse,collapse,count_distinct"
//             // args          = " -c 7 -o collapse"
//             publish_dir   = "03_peak_calling/05_consensus_peaks"
//             suffix        = ".consensus.peaks"
//         }

//         "awk_threshold" {
//             publish_dir   = "03_peak_calling/05_consensus_peaks"
//             suffix        = ".consensus.peaks.filtered"
//             ext           = "bed"
//         }

//         "plot_peaks" {
//             publish_dir = "04_reporting"
//         }

//         /*
//         ========================================================================================
//             REPORTING
//         ========================================================================================
//         */

//         "igv" {
//             publish_dir   = "04_reporting/igv"
//         }

//         "dt_compute_mat_gene" {
//             args        = "scale-regions --beforeRegionStartLength 3000 --regionBodyLength 5000 --afterRegionStartLength 3000 --skipZeros --missingDataAsZero"
//             publish_dir = "04_reporting/heatmaps/gene"
//         }

//         "dt_compute_mat_peaks" {
//             args        = "reference-point -a 3000 -b 3000 --referencePoint center --skipZeros --missingDataAsZero"
//             publish_dir = "04_reporting/heatmaps/peaks"
//         }

//         "dt_plotheatmap_gene" {
//             args        = "--sortUsing sum"
//             publish_dir = "04_reporting/heatmaps/gene"
//         }

//         "dt_plotheatmap_peaks" {
//             args        = "--sortUsing sum --startLabel \"Peak Start\" --endLabel \"Peak End\" --xAxisLabel \"\" --regionsLabel \"Peaks\""
//             publish_dir = "04_reporting/heatmaps/peaks"
//         }

//         "awk_edit_peak_bed" {
//             command     = "'{split(\$6, summit, \":\"); split(summit[2], region, \"-\"); print summit[1]\"\\t\"region[1]\"\\t\"region[2]}'"
//             suffix      = ".max_signal"
//             publish_files = false
//         }

//         "export_meta" {
//             publish_dir   = "04_reporting"
//         }

//         "calc_frip" {
//             publish_files = false
//         }

//         "meta_csv_frip_options" {
//             publish_files = false
//         }

//         "bedtools_intersect" {
//             publish_files = false
//         }

//         "calc_peak_repro_cut" {
//             args          = "-f 1,2,3,6"
//             suffix        = ".repro"
//             ext           = "bed"
//         }

//         "calc_peak_repro" {
//             publish_files = false
//         }

//         "meta_csv_peak_repro_options" {
//             publish_files = false
//         }

//         "generate_reports" {
//             publish_dir   = "04_reporting/qc"
//         }

//         "multiqc" {
//             args          = "-v"
//             publish_dir   = "04_reporting/multiqc"
//         }

//         /*
//         ========================================================================================
//             CALCULATE FRAGMENTS
//         ========================================================================================
//         */

//         "calc_frag_samtools" {
//             suffix        = ".mapped"
//             publish_files = false
//         }

//         "calc_frag_samtools_view" {
//             args          = "-F 0x04 -b"
//             suffix        = ".mapped"
//             publish_files = false
//         }

//         "calc_frag_samtools_sort" {
//             args          = "-n"
//             suffix        = ".sorted"
//             publish_files = false
//         }

//         "calc_frag_bamtobed" {
//             args          = "-bedpe"
//             publish_files = false
//         }

//         "calc_frag_awk" {
//             suffix        = ".clean"
//             ext           = "bed"
//             command       = "'\$1==\$4 && \$6-\$2 < 1000 {print \$0}'"
//             publish_files = false
//         }

//         "calc_frag_cut" {
//             args          = "-f 1,2,6"
//             suffix        = ".frags"
//             ext           = "bed"
//             command       = "| sort -T '.' -k1,1 -k2,2n -k3,3n"
//             publish_dir   = "03_peak_calling/06_fragments"
//         }

//         "awk_frag_bin" {
//             args         = "-v w=500"
//             suffix        = ".frags.bin500"
//             ext           = "bed"
//             publish_dir   = "03_peak_calling/06_fragments"
//             command       = "'{print \$1, int((\$2 + \$3)/(2*w))*w + w/2, FILENAME}'"
//             command2      = "| sort -T '.' -k1,1V -k2,2n | uniq -c | awk -v OFS=\"\\t\" '{print \$2, \$3, \$1, \$4}' | sort -T '.' -k1,1V -k2,2n"
//         }

//         "samtools_frag_len" {
//             args          = "-F 0x04"
//             args2         = "awk -F'\\t' 'function abs(x){return ((x < 0.0) ? -x : x)} {print abs(\$9)}' | sort -T '.' | uniq -c | awk -v OFS=\"\\t\" '{print \$2, \$1/2}'"
//             suffix        = ".frag_len"
//             publish_dir   = "03_peak_calling/06_fragments"
//         }
//     }
// }
